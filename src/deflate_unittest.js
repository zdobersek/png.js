// Copyright (C) 2013 Žan Doberšek
//
// This file is part of png.js.
//
// png.js is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// png.js is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with png.js. If not, see <http://www.gnu.org/licenses/>.

function deflateTestCompressingEndToEnd() {
    var testCases = [
        {
            input: "A\n",
            expectedOutput: new Uint8Array([0x73, 0xE4, 0x02, 0x00]),
        },
        {
            input: "ABCABC",
            expectedOutput: new Uint8Array([0x73, 0x74, 0x72, 0x06, 0x22, 0x00]),
        },
    ];

    for (var i = 0; i < testCases.length; i++) {
        var inputBuffer = new RBuffer(stringToUint8Array(testCases[i].input));
        var outputBuffer = new WBuffer();
        (new DEFLATE.Compressor(new RBuffer(stringToUint8Array(testCases[i].input)), outputBuffer)).process(testCases[i].input.length);
        outputBufferContentsEqual(outputBuffer.writtenArray(), testCases[i].expectedOutput);
    }
}

function deflateTestDecompressingEndToEnd() {
    var testCases = [
        {
            input: new Uint8Array([0xF3, 0x48, 0xCD, 0xC9, 0xC9, 0x57, 0x08, 0xCF, 0x2F, 0xCA, 0x49, 0xE1, 0x02, 0x00]),
            expectedOutput: Resources.HelloWorld,
        },
        {
            input: new Uint8Array([0x0B, 0xC9, 0x48, 0x55, 0x28, 0x2C, 0xCD, 0x4C, 0xCE, 0x56, 0x48, 0x2A, 0xCA, 0x2F, 0xCF,
                                   0x53, 0x48, 0xCB, 0xAF, 0x50, 0xC8, 0x2A, 0xCD, 0x2D, 0x28, 0x56, 0xC8, 0x2F, 0x4B, 0x2D,
                                   0x52, 0x28, 0x01, 0x4A, 0xE7, 0x24, 0x56, 0x55, 0x2A, 0xA4, 0xE4, 0xA7, 0x73, 0x01, 0x00]),
            expectedOutput: Resources.QuickBrownFox,
        },
        {
            input: new Uint8Array([0x35, 0x90, 0xCD, 0x71, 0x43, 0x31, 0x08, 0x84, 0xEF, 0xA9, 0x62, 0x0B, 0xF0,
                                   0xBC, 0x2A, 0x92, 0x5B, 0xAE, 0x29, 0x80, 0x48, 0x6B, 0x87, 0x19, 0xFD, 0x59, 0x02, 0x8F,
                                   0xCB, 0x0F, 0xF2, 0x4B, 0x6E, 0x42, 0xC0, 0xB2, 0xFB, 0x7D, 0xF6, 0xC9, 0x0A, 0x1D, 0xCB,
                                   0x2B, 0x72, 0x2F, 0x7D, 0x62, 0xA9, 0x41, 0x2A, 0xED, 0x82, 0xD4, 0xDB, 0x62, 0x32, 0x9A,
                                   0x4F, 0x48, 0xD6, 0xA1, 0x4B, 0x93, 0xB6, 0x1B, 0x58, 0x34, 0xBA, 0x8B, 0x39, 0x36, 0x40,
                                   0xF5, 0x55, 0x7B, 0x86, 0xB1, 0x8E, 0xD8, 0xD6, 0x96, 0x34, 0x6B, 0xF6, 0x66, 0x70, 0x43,
                                   0x91, 0xEF, 0xD0, 0x07, 0xED, 0xD4, 0x26, 0xAA, 0xDC, 0x9A, 0x40, 0x8A, 0xDE, 0x5D, 0x0E,
                                   0x7C, 0x19, 0xD8, 0xB4, 0x86, 0x38, 0xAA, 0xEE, 0xC7, 0x23, 0x4A, 0xA9, 0x17, 0xDC, 0x5D,
                                   0x17, 0x5A, 0x5F, 0x36, 0x3D, 0x83, 0x4F, 0xCE, 0xA4, 0x26, 0xA6, 0xBD, 0xC1, 0x4B, 0x91,
                                   0x9A, 0xFA, 0xA9, 0xBC, 0x87, 0xC2, 0xD4, 0xBE, 0xF4, 0x92, 0xD4, 0x11, 0xC3, 0xA0, 0x84,
                                   0xF3, 0x1A, 0x9E, 0xFA, 0x99, 0x20, 0x4E, 0xD9, 0x81, 0xF7, 0x2D, 0x29, 0x6E, 0x84, 0x4E,
                                   0x0F, 0x27, 0x67, 0x58, 0x6D, 0x98, 0x1C, 0x93, 0x3F, 0x6C, 0x99, 0x33, 0x92, 0xC7, 0xC7,
                                   0xA3, 0x17, 0x1F, 0x71, 0x8E, 0x61, 0x27, 0x92, 0x82, 0x6B, 0x11, 0x49, 0x4B, 0xF9, 0x47,
                                   0x14, 0x81, 0x1C, 0x57, 0xBF, 0xA9, 0x18, 0xDA, 0x36, 0x84, 0x21, 0x33, 0x0A, 0x9F, 0x07,
                                   0x3E, 0x9E, 0x89, 0xC3, 0xE8, 0x9B, 0x63, 0x30, 0xE8, 0x29, 0x09, 0x53, 0xCC, 0x25, 0x1F,
                                   0x9A, 0xC5, 0xF6, 0x46, 0xA4, 0x18, 0xB3, 0x6B, 0x66, 0xDB, 0x14, 0x37, 0xA9, 0x38, 0x9A,
                                   0xBC, 0x0C, 0xD9, 0xB9, 0xD1, 0xAF, 0xD7, 0xC0, 0x2C, 0xC8, 0x5C, 0x9C, 0xBB, 0x5B, 0x7B,
                                   0xD9, 0x36, 0x64, 0x03, 0xD2, 0xC0, 0xB1, 0xFE, 0xB8, 0x7A, 0x3D, 0xDE, 0x7E, 0x01]),
            expectedOutput: Resources.LoremIpsum,
        },
    ];

    for (var i = 0; i < testCases.length - 0; i++) {
        var outputBuffer = new WBuffer();
        (new DEFLATE.Decompressor(new RBuffer(testCases[i].input), outputBuffer)).process();
        outputBufferContentsEqual(outputBuffer.writtenArray(), stringToUint8Array(testCases[i].expectedOutput));
    }
}

function deflateTestRoundtrip() {
    var testCases = [{ input: Resources.QuickBrownFox }, { input: Resources.LoremIpsum }];

    for (var i = 0; i < testCases.length; i++) {
        var input = stringToUint8Array(testCases[i].input);

        var compressorOutputBuffer = new WBuffer();
        (new DEFLATE.Compressor(new RBuffer(input), compressorOutputBuffer)).process(input.length);

        var decompressorOutputBuffer = new WBuffer();
        (new DEFLATE.Decompressor(new RBuffer(compressorOutputBuffer.writtenArray()), decompressorOutputBuffer)).process();

        outputBufferContentsEqual(decompressorOutputBuffer.writtenArray(), input);
    }
}

function deflateTestFibonacciRoundtrip() {
    var fibonacciSequence = new Uint8ClampedArray(10000);
    var fib1 = 0, fib2 = 1;
    for (var i = 0; i < fibonacciSequence.length; i++) {
        fibonacciSequence[i] = fib1 + fib2;
        fib1 = fib2;
        fib2 = fibonacciSequence[i];
    }

    var compressorOutputBuffer = new WBuffer();
    (new DEFLATE.Compressor(new RBuffer(fibonacciSequence), compressorOutputBuffer)).process(fibonacciSequence.length);

    var decompressorOutputBuffer = new WBuffer();
    (new DEFLATE.Decompressor(new RBuffer(compressorOutputBuffer.writtenArray()), decompressorOutputBuffer)).process();

    outputBufferContentsEqual(decompressorOutputBuffer.writtenArray(), fibonacciSequence);
}
